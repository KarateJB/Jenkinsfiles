pipeline {
    agent {
        label 'master'
    }
    triggers {
        pollSCM 'H/1 * * * *'
    }
    environment {
		BASE_DIR = 'Src'
        NOTIFY_SUCCESS_BRANCHES = 'master;develop'
	}
    stages {
        stage('Build') {
            steps {
                sh """
                   cd ${env.BASE_DIR}
                   dotnet build
                   """
            }
            post {
				always {
                    script {
                        notifyBuild()
					}
                }
			}
        }
        stage('UnitTest') {
			steps {
                sh  """
                    cd ${env.BASE_DIR}/Welfare.Test
				    dotnet test -r Results --logger "trx;LogFileName=report.trx"
                    """
				step([$class: 'MSTestPublisher', testResultsFile:"${env.BASE_DIR}/Welfare.Test/Results/*.trx", failOnError: true, keepLongStdio: true])
			}
            post {
                failure {
                    script {
                        notifyBuild()
					}
                }
            }
		}
        stage('Publish') {
            steps {
                sh """
                    cd ${env.BASE_DIR}
                    dotnet publish --output publish --configuration release Welfare.Webapi
                    """
                cifsPublisher(
                    publishers: [
                        [configName: 'AP_Server', transfers: 
                            [
                                [
                                    cleanRemote: false, 
                                    excludes: '', 
                                    flatten: false, 
                                    makeEmptyDirs: false, 
                                    noDefaultExcludes: false, 
                                    patternSeparator: '[, ]+', 
                                    removePrefix: 'Src/Welfare.WebApi/publish', 
                                    sourceFiles: 'Src/Welfare.WebApi/publish/**'
                                ]
                            ], 
                            remoteDirectory: 'Welfare.WebApi/publish/$BRANCH_NAME/$BUILD_NUMBER', 
                            remoteDirectorySDF: false, 
                            usePromotionTimestamp: false, 
                            useWorkspaceInPromotion: false, 
                            verbose: false]])
            }
            post {
                success {
					script {
                        
                        if(isNotifySuccessBranch(env.BRANCH_NAME)==true){
                            notifyBuild("Success on publish")
                        }
                        cleanWs() //Clean workspace
					}
				}
				failure {
					script {
                        notifyBuild("Fail on publish")
                        cleanWs() //Clean workspace
					}
				}
			}
        }
    }
}


def notifyBuild(String extraMsg='') {

  def commitId = sh(returnStdout: true, script: 'git rev-parse --short HEAD') //Get short commit hash
  def buildStatus = currentBuild.currentResult //Get current build status

  // Default values
  def colorCode = '#FF0000'
  def msg = "${buildStatus} on #${env.BUILD_NUMBER} - ${STAGE_NAME} \n[${env.JOB_NAME}] - ${commitId} \n${env.BUILD_URL}"

  if (extraMsg?.trim()) {
      msg = "${msg} \n${extraMsg}"
  }

  if (buildStatus == 'SUCCESS') {
    colorCode = '#00FF00'
  }
  else if(buildStatus == 'ABORTED') {
    colorCode = '#FF0000'
  }
   else {
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: msg)
}

def isNotifySuccessBranch(String branch){
    
    def allowedBranches = env.NOTIFY_SUCCESS_BRANCHES.split(';')
    return allowedBranches.contains(env.BRANCH_NAME)
}
